// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  password      String
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isDeleted     Boolean   @default(false)
  products      Product[]
  cart          Cart?
  addresses     Address[]
  favorites     Product[] @relation("UserFavorites")
  productReviews ProductReview[]
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  parentId    Int?       // Üst kategori ID'si
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isDeleted   Boolean    @default(false)
}

model Product {
  id            Int             @id @default(autoincrement())
  name          String
  price         Float
  stock         Int             @default(0)
  description   String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  isDeleted     Boolean         @default(false)
  userId        Int
  user          User            @relation(fields: [userId], references: [id])
  categoryId    Int
  category      Category        @relation(fields: [categoryId], references: [id])
  cartItems     CartItem[]
  images        ProductImage[]
  favoritedBy   User[]          @relation("UserFavorites")
  reviews       ProductReview[]
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductReview {
  id        Int      @id @default(autoincrement())
  rating    Int      // 1-5 arası puanlama
  comment   String?
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId]) // Bir kullanıcı bir ürüne sadece bir yorum yapabilir
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model Address {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  title     String   // Ev, İş vb.
  fullName  String
  phone     String
  city      String
  district  String
  address   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}